full script

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';


CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`Recipe` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `sdecr` MEDIUMTEXT NOT NULL,
  `descr` LONGTEXT NOT NULL,
  `imgUrl` LONGTEXT NOT NULL, 
  `servings` INT NOT NULL DEFAULT 1,
  `author` INT NOT NULL DEFAULT 8,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC),
  INDEX `fk_Recipe_User_idx` (`author` ASC),
  CONSTRAINT `fk_Recipe_User`
    FOREIGN KEY (`author`)
    REFERENCES `u689018343_cookbook`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`Ingredient` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `fk_Ingredient_Recipe`
    FOREIGN KEY (`ID`)
    REFERENCES `u689018343_cookbook`.`RecipeIngredient` (`Ingredient_ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`RecipeIngredient` (
  `Recipe_ID` INT NOT NULL,
  `Ingredient_ID` INT NOT NULL,
  `amount_int` INT NOT NULL,
  `amount_unit` VARCHAR(255) NOT NULL,
  INDEX `fk_RecipeIngredient_Recipe_idx` (`Recipe_ID` ASC),
  INDEX `fk_RecipeIngredient_Ingredient1_idx` (`Ingredient_ID` ASC),
  PRIMARY KEY (`Recipe_ID`, `Ingredient_ID`),
  CONSTRAINT `fk_RecipeIngredient_Recipe`
    FOREIGN KEY (`Recipe_ID`)
    REFERENCES `u689018343_cookbook`.`Recipe` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_RecipeIngredient_Ingredient1`
    FOREIGN KEY (`Ingredient_ID`)
    REFERENCES `u689018343_cookbook`.`Ingredient` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`Tags` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `ispredefined` TINYINT NOT NULL DEFAULT 1,
  `tagname` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID`)
);

CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`RecipeTag` (
  `Recipe_ID` INT NOT NULL,
  `Tags_ID` INT NOT NULL,
  INDEX `fk_RecipeTag_Recipe1_idx` (`Recipe_ID` ASC),
  INDEX `fk_RecipeTag_Tags1_idx` (`Tags_ID` ASC),
  PRIMARY KEY (`Recipe_ID`, `Tags_ID`),
  CONSTRAINT `fk_RecipeTag_Recipe1`
    FOREIGN KEY (`Recipe_ID`)
    REFERENCES `u689018343_cookbook`.`Recipe` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_RecipeTag_Tags1`
    FOREIGN KEY (`Tags_ID`)
    REFERENCES `u689018343_cookbook`.`Tags` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE `RecipeCustomTag` (
  `Recipe_ID` int(11) NOT NULL,
  `User_ID` int(11) NOT NULL,
  `Tags_ID` int(11) NOT NULL,
  PRIMARY KEY (`Recipe_ID`,`User_ID`,`Tags_ID`),
  KEY `fk_RecipeCustomTag_User` (`User_ID`),
  KEY `fk_RecipeCustomTag_Tags` (`Tags_ID`),
  CONSTRAINT `fk_RecipeCustomTag_Recipe` FOREIGN KEY (`Recipe_ID`) REFERENCES `Recipe` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_RecipeCustomTag_Tags` FOREIGN KEY (`Tags_ID`) REFERENCES `Tags` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_RecipeCustomTag_User` FOREIGN KEY (`User_ID`) REFERENCES `User` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`User` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `isadmin` TINYINT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC)
);

CREATE TABLE `UserRecipeStar` (
  `User_ID` int(11) NOT NULL,
  `Recipe_ID` int(11) NOT NULL,
  `isstar` tinyint(4) NOT NULL DEFAULT 0,
  PRIMARY KEY (`User_ID`,`Recipe_ID`),
  KEY `fk_UserRecipe_User1_idx` (`User_ID`),
  KEY `fk_UserRecipe_Recipe1_idx` (`Recipe_ID`),
  CONSTRAINT `fk_UserRecipe_Recipe1` FOREIGN KEY (`Recipe_ID`) REFERENCES `Recipe` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_UserRecipe_User1` FOREIGN KEY (`User_ID`) REFERENCES `User` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=COMPACT;

CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`UserRecipeWeeklyList` (
  `User_ID` INT NOT NULL,
  `Recipe_ID` INT NOT NULL,
  `date` DATE NOT NULL,
  `w_servings` INT NOT NULL DEFAULT 1, 
  PRIMARY KEY (`User_ID`,`Recipe_ID`,`date`),
  KEY `fk_UserRecipeDates_Recipe` (`Recipe_ID`),
  CONSTRAINT `fk_UserRecipeDates_Recipe` FOREIGN KEY (`Recipe_ID`) REFERENCES `Recipe` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_UserRecipeDates_User` FOREIGN KEY (`User_ID`) REFERENCES `User` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;



CREATE TABLE IF NOT EXISTS Comments (
  Comment_ID INT AUTO_INCREMENT PRIMARY KEY,
  User_ID INT NOT NULL,
  Recipe_ID INT NOT NULL,
  Comment MEDIUMTEXT NOT NULL,
  CONSTRAINT fk_Comments_User FOREIGN KEY (User_ID)
    REFERENCES User (ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT fk_Comments_Recipe FOREIGN KEY (Recipe_ID)
    REFERENCES Recipe (ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`UserMessage` (
  `ID` INT NOT NULL,
  `message` MEDIUMTEXT NULL,
  `recipe_ID` INT NOT NULL,
  `sender_ID` INT NOT NULL,
  `receiver_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_UserMessage_User1_idx` (`sender_ID` ASC),
  INDEX `fk_UserMessage_User2_idx` (`receiver_ID` ASC),
  CONSTRAINT `fk_UserMessage_User1`
    FOREIGN KEY (`sender_ID`)
    REFERENCES `u689018343_cookbook`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_UserMessage_User2`
    FOREIGN KEY (`receiver_ID`)
    REFERENCES `u689018343_cookbook`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_UserMessage_Recipe`
    FOREIGN KEY (`recipe_ID`)
    REFERENCES `u689018343_cookbook`.`Recipe` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`HelpEntries` (
  `ID` int(11) NOT NULL,
  `title` mediumtext NOT NULL,
  `description` mediumtext NOT NULL,
  `text` longtext NOT NULL
  PRIMARY KEY (`ID`)
);

CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`ShoppingLists` (
  `User_ID` INT NOT NULL,
  `week` INT NOT NULL,
  `shoppinglist` LONGTEXT,
  PRIMARY KEY (`userid`, `week`),
  CONSTRAINT `fk_shoppinglists_User`
    FOREIGN KEY (`userid`)
    REFERENCES `u689018343_cookbook`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  UNIQUE INDEX `unique_user_week` (`userid`, `week`)
);


CREATE TABLE IF NOT EXISTS `u689018343_cookbook`.`Ratings` (
  `User_ID` int(11) NOT NULL,
  `Recipe_ID` int(11) NOT NULL,
  `rating` tinyint(4) DEFAULT 0
  PRIMARY KEY (`User_ID`, `Recipe_ID`),
  CONSTRAINT `fk_ratings_user`
    FOREIGN KEY (`User_ID`) REFERENCES `u689018343_cookbook`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ratings_recipe`
    FOREIGN KEY (`Recipe_ID`) REFERENCES `u689018343_cookbook`.`Recipe` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- Views
CREATE OR REPLACE VIEW `FullRecipeView` AS 
SELECT 
    `r`.`ID` AS `Recipe_ID`,
    `r`.`name` AS `Recipe_Name`,
    `r`.`sdecr` AS `Short_Description`,
    `r`.`descr` AS `Description`,
    `r`.`imgUrl` AS `Image_URL`,
    `r`.`servings` AS `Servings`,
    `r`.`author` AS `Author`,
    CONCAT('[', IFNULL(GROUP_CONCAT(DISTINCT '{"tagname": "', `t`.`tagname`,'"}' SEPARATOR ','), ''), ']') AS `Predefined_Tags_JSON`,
    CONCAT('[', IFNULL(GROUP_CONCAT(DISTINCT '{"name": "', `i`.`name`,'", "amount": "',`ri`.`amount_int`,'", "unit": "',`ri`.`amount_unit`,'"}' SEPARATOR ','), ''), ']') AS `Ingredients_JSON`,
    CONCAT('[', IFNULL(GROUP_CONCAT(DISTINCT '{"comment_id": "', `c`.`Comment_ID`,'", "comment": "', `c`.`Comment`,'", "user_id": "', `c`.`User_ID`,'", "user_name": "', `u`.`name`,'" }' SEPARATOR ','), ''), ']') AS `Comments_JSON`,
    IFNULL(ROUND(AVG(`rat`.`rating`), 2), 0) AS `Average_Rating`
FROM 
    ((((((`Recipe` `r` 
    LEFT JOIN `RecipeIngredient` `ri` ON (`r`.`ID` = `ri`.`Recipe_ID`)) 
    LEFT JOIN `Ingredient` `i` ON (`ri`.`Ingredient_ID` = `i`.`ID`)) 
    LEFT JOIN `RecipeTag` `rti` ON (`r`.`ID` = `rti`.`Recipe_ID`)) 
    LEFT JOIN `Tags` `t` ON (`rti`.`Tags_ID` = `t`.`ID`)) 
    LEFT JOIN `Comments` `c` ON (`r`.`ID` = `c`.`Recipe_ID`)) 
    LEFT JOIN `User` `u` ON (`c`.`User_ID` = `u`.`ID`))
    LEFT JOIN `Ratings` `rat` ON (`r`.`ID` = `rat`.`Recipe_ID`)
WHERE
    `t`.`ispredefined` = 1
GROUP BY `r`.`ID`;



CREATE VIEW ShortRecipeView AS
SELECT
    r.ID AS Recipe_ID,
    r.name AS Recipe_Name,
    r.imgUrl AS Image_URL,
    CONCAT('[', GROUP_CONCAT('{"tagname": "', t.tagname, '"}'), ']') AS Predefined_Tags_JSON
FROM
    Recipe r
LEFT JOIN
    RecipeTag rt ON r.ID = rt.Recipe_ID
LEFT JOIN
    Tags t ON rt.Tags_ID = t.ID
GROUP BY
    r.ID;

CREATE OR REPLACE VIEW CommentsView AS
SELECT 
    c.Comment_ID,
    c.Comment,
    c.User_ID,
    u.name AS User_Name, 
    c.Recipe_ID
FROM 
    Comments c
JOIN 
    User u ON c.User_ID = u.ID;


CREATE OR REPLACE VIEW `CustomTagsView` AS 
SELECT 
    r.ID AS Recipe_ID,
    r.name AS Recipe_Name,
    CONCAT('[', IFNULL(GROUP_CONCAT(DISTINCT '{"tagname": "', tc.tagname,'"}' SEPARATOR ','), ''), ']') AS Custom_Tags_JSON
FROM 
    Recipe r
LEFT JOIN 
    RecipeCustomTag rct ON r.ID = rct.Recipe_ID
LEFT JOIN 
    Tags tc ON rct.Tags_ID = tc.ID
GROUP BY 
    r.ID;

CREATE VIEW MessageView AS
SELECT
    um.ID AS MessageID,
    um.message AS MessageText,
    um.sender_ID AS SenderID,
    u.userName AS SenderName,
    um.receiver_ID AS ReceiverID,
    ur.userName AS ReceiverName,
    um.recipe_ID AS RecipeID,
    r.name AS RecipeTitle
FROM
    UserMessage um
JOIN User u ON um.sender_ID = u.ID
JOIN User ur ON um.receiver_ID = ur.ID
JOIN Recipe r ON um.recipe_ID = r.ID;



-- Procedures


DELIMITER $$

CREATE DEFINER=`u689018343_nulla`@`%` PROCEDURE `AddNewRecipe`(
    IN p_userID INT,
    IN p_name VARCHAR(255),
    IN p_shortDescr MEDIUMTEXT,
    IN p_descr LONGTEXT,
    IN p_imgUrl LONGTEXT,
    IN p_servings INT,
    IN p_author INT, 
    IN p_ingredients TEXT,
    IN p_tags TEXT
)
BEGIN
    DECLARE recipeID INT;
    DECLARE currentIngredient VARCHAR(255);
    DECLARE currentAmountInt INT;
    DECLARE currentAmountUnit VARCHAR(255);
    DECLARE currentTagName VARCHAR(255);
    DECLARE tagID INT;
    DECLARE tagIsPredefined TINYINT;
    DECLARE CONCAT VARCHAR(255);
    DECLARE MESSAGE_TEXT VARCHAR(255);

    -- Convert description to JSON format
    SET p_descr = CONCAT('{"steps": ["', REPLACE(p_descr, ';', '","'), '"]}');

    -- Insert into Recipe table
    INSERT INTO Recipe (name, sdecr, descr, imgUrl, servings, author) VALUES (p_name, p_shortDescr, p_descr, p_imgUrl, p_servings, p_author);
    SET recipeID = LAST_INSERT_ID();

    -- Split ingredients string and insert into RecipeIngredient table
    WHILE LENGTH(p_ingredients) > 0 DO
        SET currentIngredient = TRIM(SUBSTRING_INDEX(p_ingredients, ';', 1));
        SET p_ingredients = TRIM(BOTH ';' FROM SUBSTRING(p_ingredients, LENGTH(currentIngredient) + 2));

        SET currentAmountInt = CAST(SUBSTRING_INDEX(currentIngredient, ',', 1) AS UNSIGNED);
        SET currentAmountUnit = SUBSTRING_INDEX(SUBSTRING_INDEX(currentIngredient, ',', -1), ',', 1);
        SET currentIngredient = TRIM(SUBSTRING_INDEX(currentIngredient, ',', -1));

        -- Check if ingredient with same name and unit already exists
        IF EXISTS (SELECT 1 FROM RecipeIngredient ri INNER JOIN Ingredient i ON ri.Ingredient_ID = i.ID WHERE i.name = currentIngredient AND ri.amount_unit = currentAmountUnit LIMIT 1) THEN
            SET MESSAGE_TEXT = CONCAT('Error: Ingredient "', currentIngredient, '" with unit "', currentAmountUnit, '" already exists in recipe ingredients.');
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = MESSAGE_TEXT;
        END IF;

        -- Insert into Ingredient table if not exists
        INSERT IGNORE INTO Ingredient (name) VALUES (currentIngredient);

        -- Insert into RecipeIngredient
        INSERT INTO RecipeIngredient (Recipe_ID, Ingredient_ID, amount_int, amount_unit) VALUES (recipeID, (SELECT ID FROM Ingredient WHERE name = currentIngredient LIMIT 1), currentAmountInt, currentAmountUnit);
    END WHILE;

    -- Split tags string and insert into Tags and RecipeTag/RecipeCustomTag tables
    WHILE LENGTH(p_tags) > 0 DO
        SET currentTagName = TRIM(SUBSTRING_INDEX(p_tags, ';', 1));
        SET p_tags = TRIM(BOTH ';' FROM SUBSTRING(p_tags, LENGTH(currentTagName) + 2));

        -- Check if tag exists
        SELECT ID, ispredefined INTO tagID, tagIsPredefined FROM Tags WHERE tagname = currentTagName;

        -- If tag does not exist, insert into Tags table
        IF tagID IS NULL THEN
            INSERT INTO Tags (ispredefined, tagname) VALUES (0, currentTagName);
            SET tagID = LAST_INSERT_ID();
        END IF;

        -- Insert into appropriate table based on ispredefined value
        IF tagIsPredefined = 1 THEN
            -- Insert into RecipeTag
            INSERT INTO RecipeTag (Recipe_ID, Tags_ID) VALUES (recipeID, tagID);
        ELSE
            -- Insert into RecipeCustomTag
            INSERT INTO RecipeCustomTag (Recipe_ID, User_ID, Tags_ID) VALUES (recipeID, p_userID, tagID);
        END IF;
    END WHILE;
END$$

DELIMITER ;



DELIMITER $$
CREATE OR REPLACE PROCEDURE `UpdateRecipe`(
    IN p_recipeID INT,
    IN p_userID INT,
    IN p_name VARCHAR(255),
    IN p_shortDescr MEDIUMTEXT,
    IN p_descr LONGTEXT,
    IN p_imgUrl LONGTEXT,
    IN p_servings INT,
    IN p_author INT, 
    IN p_ingredients TEXT,
    IN p_tags TEXT
)
BEGIN
    DECLARE existingName VARCHAR(255);
    DECLARE existingShortDescr MEDIUMTEXT;
    DECLARE existingDescr LONGTEXT;
    DECLARE existingImgUrl LONGTEXT;
    DECLARE existingServings INT;
    DECLARE existingIngredients TEXT;
    DECLARE existingTags TEXT;
    DECLARE currentTagName VARCHAR(255);
    DECLARE tagID INT;
    DECLARE ispredefined INT; 
    -- Get existing recipe details
    SELECT name, sdecr, descr, imgUrl, servings, GROUP_CONCAT(CONCAT(ri.Ingredient_ID, ',', ri.amount_int, ',', ri.amount_unit) SEPARATOR ';') INTO existingName, existingShortDescr, existingDescr, existingImgUrl, existingServings, existingIngredients
    FROM Recipe
    LEFT JOIN RecipeIngredient AS ri ON Recipe.ID = ri.Recipe_ID
    WHERE Recipe.ID = p_recipeID;

    SELECT GROUP_CONCAT(Tags_ID SEPARATOR ',') INTO existingTags FROM RecipeTag WHERE Recipe_ID = p_recipeID;

    -- Check if any changes are made
    IF (existingName <> p_name OR existingShortDescr <> p_shortDescr OR existingDescr <> p_descr OR existingImgUrl <> p_imgUrl OR existingServings <> p_servings OR existingIngredients <> p_ingredients OR existingTags <> p_tags) THEN
        -- Convert description to JSON format
        SET p_descr = CONCAT('{"steps": ["', REPLACE(p_descr, ';', '","'), '"]}');

        -- Update Recipe table
        UPDATE Recipe 
        SET 
            name = p_name,
            sdecr = p_shortDescr,
            descr = p_descr,
            imgUrl = p_imgUrl,
            servings = p_servings,
            author = p_author 
        WHERE ID = p_recipeID;

        -- Delete existing RecipeIngredient entries for the recipe
        DELETE FROM RecipeIngredient WHERE Recipe_ID = p_recipeID;

        -- Delete existing RecipeTag and RecipeCustomTag entries for the recipe
        DELETE FROM RecipeTag WHERE Recipe_ID = p_recipeID;
        DELETE FROM RecipeCustomTag WHERE Recipe_ID = p_recipeID;

        -- Insert updated ingredients into RecipeIngredient table
        WHILE LENGTH(p_ingredients) > 0 DO
            INSERT IGNORE INTO Ingredient (name) VALUES (SUBSTRING_INDEX(p_ingredients, ',', 1));
            INSERT INTO RecipeIngredient (Recipe_ID, Ingredient_ID, amount_int, amount_unit) 
            VALUES (
                p_recipeID, 
                (SELECT ID FROM Ingredient WHERE name = SUBSTRING_INDEX(p_ingredients, ',', 1)),
                CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(p_ingredients, ',', 2), ',', -1) AS UNSIGNED),
                SUBSTRING_INDEX(SUBSTRING_INDEX(p_ingredients, ',', -1), ',', 1)
            );
            SET p_ingredients = TRIM(BOTH ';' FROM SUBSTRING(p_ingredients, LENGTH(SUBSTRING_INDEX(p_ingredients, ',', 1)) + 2));
        END WHILE;

        -- Split tags string and insert into RecipeTag and RecipeCustomTag tables
        WHILE LENGTH(p_tags) > 0 DO
            SET currentTagName = TRIM(SUBSTRING_INDEX(p_tags, ';', 1));
            SET p_tags = TRIM(BOTH ';' FROM SUBSTRING(p_tags, LENGTH(currentTagName) + 2));

            -- Check if tag exists
            SELECT ID, ispredefined INTO tagID, ispredefined FROM Tags WHERE tagname = currentTagName;

            -- If tag does not exist, insert into Tags table
            IF tagID IS NULL THEN
                INSERT INTO Tags (ispredefined, tagname) VALUES (0, currentTagName);
                SET tagID = LAST_INSERT_ID();
                SET ispredefined = 0; 
            END IF;

            -- Insert into appropriate table based on ispredefined value
            IF tagID IS NOT NULL THEN
                IF ispredefined = 1 THEN
                    -- Insert into RecipeTag
                    INSERT INTO RecipeTag (Recipe_ID, Tags_ID) VALUES (p_recipeID, tagID);
                ELSE
                    -- Insert into RecipeCustomTag
                    INSERT INTO RecipeCustomTag (Recipe_ID, User_ID, Tags_ID) VALUES (p_recipeID, p_userID, tagID);
                END IF;
            END IF;
        END WHILE;
    END IF;
END$$
DELIMITER ;



DELIMITER //

CREATE PROCEDURE DeleteRecipe (
    IN p_recipeID INT
)
BEGIN
    -- Delete Recipe from Recipe table
    DELETE FROM Recipe WHERE ID = p_recipeID;

    -- Delete RecipeIngredient entries for the recipe
    DELETE FROM RecipeIngredient WHERE Recipe_ID = p_recipeID;

    -- Delete RecipeTag entries for the recipe
    DELETE FROM RecipeTag WHERE Recipe_ID = p_recipeID;
END //

DELIMITER ;


DELIMITER $$
CREATE DEFINER=`u689018343_nulla`@`%` PROCEDURE `UpdateFavoriteRecipe`(IN `p_UserID` INT, IN `p_RecipeID` INT)
BEGIN
    DECLARE v_Exists INT;

    
    SELECT COUNT(*) INTO v_Exists
    FROM UserRecipeStar
    WHERE User_ID = p_UserID AND Recipe_ID = p_RecipeID;

    IF v_Exists > 0 THEN
        -
        UPDATE UserRecipeStar
        SET isstar = 1
        WHERE User_ID = p_UserID AND Recipe_ID = p_RecipeID;
    ELSE
       
        INSERT INTO UserRecipeStar (User_ID, Recipe_ID, isstar)
        VALUES (p_UserID, p_RecipeID, 1);
    END IF;
END$$
DELIMITER ;

DELIMITER $$

CREATE OR REPLACE PROCEDURE `UpdateWeeklyRecipe`(
    IN p_UserID INT,
    IN p_RecipeID INT,
    IN p_Date DATE,
    IN p_WServings INT 
)
BEGIN
    DECLARE v_Exists INT;

    SELECT COUNT(*)
    INTO v_Exists
    FROM UserRecipeWeeklyList
    WHERE User_ID = p_UserID AND Recipe_ID = p_RecipeID AND date = p_Date;

    IF v_Exists > 0 THEN
        UPDATE UserRecipeWeeklyList
        SET date = p_Date,
            w_servings = p_WServings 
        WHERE User_ID = p_UserID AND Recipe_ID = p_RecipeID AND date = p_Date;
    ELSE
        INSERT INTO UserRecipeWeeklyList (User_ID, Recipe_ID, date, w_servings)
        VALUES (p_UserID, p_RecipeID, p_Date, p_WServings);
    END IF;
END$$

DELIMITER ;
